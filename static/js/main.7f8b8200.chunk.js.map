{"version":3,"sources":["logo.svg","components/AppHeader/AppHeader.js","components/Card/Card.js","components/CardList/CardList.js","components/CardsForm/CardsForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppHeader","title","className","src","logo","alt","Card_Functional","React","Component","frontSide","backSide","id","deleteItem","useState","isFront","changeFace","frontClassList","backClassList","cardClassList","onClick","oldValue","href","CardList","cardData","map","props","key","CardsForm","setFrontSide","setBackSide","action","onSubmit","e","preventDefault","addItem","type","onChange","target","value","required","placeholder","App_Functional","cards","setCards","useEffect","length","fetch","apiUrl","then","data","json","countries","country","name","capital","uuidv4","find","card","alert","newItem","previousCards","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f8b8200.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport './AppHeader.css';\r\nimport logo from '../../logo.svg';\r\n\r\nconst AppHeader = ({ title }) => (\r\n    <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>{title}</p>\r\n    </header>     \r\n);\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport './Card.css';\r\n\r\n\r\n// State change ---> React renders the DOM ---> User event (click)\r\n//   ^                                               |\r\n//   ------------event handler------------------------\r\n\r\nclass Card_ClassBased extends React.Component { \r\n    state = {\r\n        isFront: true\r\n    }\r\n    handleClick = () => {\r\n        this.setState(function(oldState) {\r\n            return {\r\n                isFront: !oldState.isFront\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // called when the component first mounts to the DOM \r\n        // - data loading, e.g. from APIs (Application Programming Interfaces)\r\n        // Do not load data inside the constructor! Load data in the componentDidMount\r\n        console.log('componentDidMount', this.props.frontSide);\r\n    }\r\n\r\n    componentDidUpdate( previousProps, previousState ) {\r\n        // Data loading (updates)\r\n        console.log('componentDidUpdate', this.props.frontSide);\r\n    }\r\n\r\n    render() {\r\n        const isFront = this.state.isFront;\r\n        const frontClassList = `card__front ${(isFront ? \"\" : \"hidden\")}`;\r\n        const backClassList = `card__back ${isFront ? \"hidden\" : \"\"}`;\r\n        return ( \r\n            <div className=\"card\" onClick={this.handleClick}>\r\n                <div className={frontClassList}>{this.props.frontSide}</div>\r\n                <div className={backClassList}>{this.props.backSide}</div>\r\n            </div>  \r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst Card_Functional = function({ frontSide, backSide, id, deleteItem }) {\r\n    // State variables\r\n    const [isFront, changeFace] = React.useState(true);\r\n    // Event handlers\r\n    function handleClick() {\r\n        changeFace(oldValue => !oldValue);\r\n    }\r\n    function handleDelete() {\r\n        deleteItem(id);\r\n    }\r\n    const frontClassList = `card__text ${(isFront ? \"\" : \"hidden\")}`;\r\n    const backClassList = `card__text ${isFront ? \"hidden\" : \"\"}`;\r\n    const cardClassList = `card  ${isFront ? 'card__front' : 'card__back'}`;\r\n    return ( \r\n        <div className={cardClassList} onClick={handleClick}>\r\n            <div className={frontClassList}>\r\n                {frontSide}\r\n            </div>\r\n            <div className={backClassList}>\r\n                {backSide}\r\n            </div>\r\n            <a href=\"javascript:void(0)\" \r\n               className=\"card__delete\"\r\n               onClick={handleDelete}>X</a>\r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default Card_Functional;","import React from 'react';\r\n\r\nimport Card from '../Card/Card';\r\nimport './CardList.css';\r\n\r\n\r\nfunction CardList({ cardData, deleteItem }) {\r\n    return ( \r\n        <div className=\"card-list-swimlane\">\r\n            {cardData.map( (props) => \r\n                <Card key={props.id} deleteItem={deleteItem} {...props} /> )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './CardsForm.css';\r\n\r\nfunction CardsForm(props) {\r\n    const [frontSide, setFrontSide] = React.useState('');\r\n    const [backSide, setBackSide] = React.useState('');\r\n    function handleFrontSideChange(e) {\r\n        setFrontSide(e.target.value);\r\n    }\r\n    function handleBackSideChange(e) {\r\n        setBackSide(e.target.value);\r\n    }\r\n    function handleSubmit(e) {\r\n        e.preventDefault(); \r\n        props.addItem(frontSide, backSide);\r\n    }\r\n    return (\r\n        <form action=\"#\" onSubmit={handleSubmit} className=\"form-container\">\r\n            <label className=\"textfield-container\">\r\n                Front side:\r\n                <input type=\"text\"  \r\n                       onChange={handleFrontSideChange}\r\n                       value={frontSide}\r\n                       required\r\n                       placeholder=\"Front side\" \r\n                       className=\"js-front-side textfield-input\" />\r\n            </label>\r\n            <label className=\"textfield-container\">\r\n                Back side:\r\n                <input type=\"text\" \r\n                       onChange={handleBackSideChange}\r\n                       value={backSide}\r\n                       required\r\n                       placeholder=\"Back side\" \r\n                       className=\"js-back-side textfield-input\" />\r\n            </label>\r\n            \r\n            <input type=\"submit\" value=\"Submit Card\" className=\"submit-button\" />\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nexport default CardsForm;","import React, { Component, useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport AppHeader from './components/AppHeader/AppHeader';\r\nimport CardList from './components/CardList/CardList';\r\nimport CardsForm from './components/CardsForm/CardsForm';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass App_ClassBased extends Component {\r\n  state = {\r\n    cards: []\r\n  }\r\n  componentDidMount() {\r\n    // called when the component first mounts to the DOM \r\n    // - data loading, e.g. from APIs (Application Programming Interfaces)\r\n    // Do not load data inside the constructor! Load data in the componentDidMount\r\n    fetch( this.props.apiUrl )\r\n      .then( data => data.json() )\r\n      .then( countries => {\r\n          function getNameAndCapital( country ) {\r\n            return { \r\n              frontSide: country.name, \r\n              backSide: country.capital,\r\n              id: uuidv4() \r\n            }\r\n          }\r\n          const cards = countries.map( getNameAndCapital );\r\n          this.setState({ cards });\r\n      } );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <AppHeader title=\"Flash Cards\" />\r\n        <CardsForm />        \r\n        <CardList cardData={this.state.cards} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction App_Functional( props ) {\r\n  const [cards, setCards] = useState([]);\r\n\r\n  // functionCallback is called \r\n  // 1. componentDidMount()\r\n  // 2. componentDidUpdate() or componentWillUnmount()\r\n  useEffect( () => {\r\n    if ( cards.length === 0 ) {\r\n      fetch( props.apiUrl )\r\n      .then( data => data.json() )\r\n      .then( countries => {\r\n          function getNameAndCapital( country ) {\r\n            return { \r\n              frontSide: country.name, \r\n              backSide: country.capital,\r\n              id: uuidv4()  \r\n            }\r\n          }\r\n          const cards = countries.map( getNameAndCapital );\r\n          setCards(cards);\r\n      } );\r\n    } \r\n  } );\r\n  function addItem(frontSide, backSide) { \r\n    if ( typeof cards.find( card => card.frontSide == frontSide ) !== 'undefined' ) {\r\n      alert('The front side has to be unique. Card was not added');\r\n    } else {\r\n      const newItem = { \r\n        frontSide, \r\n        backSide, \r\n        id: uuidv4() \r\n      }\r\n      setCards( previousCards => \r\n        [newItem, ...previousCards] \r\n      );\r\n    }\r\n  }\r\n  function deleteItem(id) {\r\n    setCards( previousCards => \r\n      previousCards.filter( card => card.id !== id )\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <AppHeader title=\"Flash Cards\" />\r\n      <CardsForm addItem={addItem} />\r\n      <CardList cardData={cards} deleteItem={deleteItem} />\r\n    </div>\r\n  );  \r\n}\r\n\r\nexport default App_Functional;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App apiUrl=\"https://restcountries.eu/rest/v2/all\" />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}