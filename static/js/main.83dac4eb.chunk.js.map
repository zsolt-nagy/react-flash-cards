{"version":3,"sources":["logo.svg","components/AppHeader/AppHeader.js","components/Card/Card.js","components/CardList/CardList.js","components/CardsForm/CardsForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppHeader","title","className","src","logo","alt","Card_Functional","React","Component","frontSide","backSide","id","deleteItem","useState","isFront","changeFace","frontClassList","backClassList","cardClassList","onClick","oldValue","href","CardList","cardData","map","props","key","CardsForm","setFrontSide","setBackSide","action","onSubmit","e","preventDefault","addItem","type","onChange","target","value","required","placeholder","App_Functional","cards","setCards","useEffect","length","fetch","apiUrl","then","data","json","countries","country","name","capital","uuidv4","find","card","alert","newItem","previousCards","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83dac4eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './AppHeader.css';\r\nimport logo from '../../logo.svg';\r\n\r\nconst AppHeader = ({ title }) => (\r\n    <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>{title}</p>\r\n    </header>     \r\n);\r\n\r\nexport default AppHeader;","import React from 'react';\nimport './Card.css';\n\n\n// State change ---> React renders the DOM ---> User event (click)\n//   ^                                               |\n//   ------------event handler------------------------\n\nclass Card_ClassBased extends React.Component { \n    state = {\n        isFront: true\n    }\n    handleClick = () => {\n        this.setState(function(oldState) {\n            return {\n                isFront: !oldState.isFront\n            }\n        });\n    }\n\n    componentDidMount() {\n        // called when the component first mounts to the DOM \n        // - data loading, e.g. from APIs (Application Programming Interfaces)\n        // Do not load data inside the constructor! Load data in the componentDidMount\n        console.log('componentDidMount', this.props.frontSide);\n    }\n\n    componentDidUpdate( previousProps, previousState ) {\n        // Data loading (updates)\n        console.log('componentDidUpdate', this.props.frontSide);\n    }\n\n    render() {\n        const isFront = this.state.isFront;\n        const frontClassList = `card__front ${(isFront ? \"\" : \"hidden\")}`;\n        const backClassList = `card__back ${isFront ? \"hidden\" : \"\"}`;\n        return ( \n            <div className=\"card\" onClick={this.handleClick}>\n                <div className={frontClassList}>{this.props.frontSide}</div>\n                <div className={backClassList}>{this.props.backSide}</div>\n            </div>  \n        );\n    }\n}\n\n\nconst Card_Functional = function({ frontSide, backSide, id, deleteItem }) {\n    // State variables\n    const [isFront, changeFace] = React.useState(true);\n    // Event handlers\n    function handleClick() {\n        changeFace(oldValue => !oldValue);\n    }\n    function handleDelete() {\n        deleteItem(id);\n    }\n    const frontClassList = `card__text ${(isFront ? \"\" : \"hidden\")}`;\n    const backClassList = `card__text ${isFront ? \"hidden\" : \"\"}`;\n    const cardClassList = `card  ${isFront ? 'card__front' : 'card__back'}`;\n    return ( \n        <div className={cardClassList} onClick={handleClick}>\n            <div className={frontClassList}>\n                {frontSide}\n            </div>\n            <div className={backClassList}>\n                {backSide}\n            </div>\n            <a href=\"javascript:void(0)\" \n               className=\"card__delete\"\n               onClick={handleDelete}>X</a>\n        </div>  \n    );\n}\n\nexport default Card_Functional;","import React from 'react';\n\nimport Card from '../Card/Card';\nimport './CardList.css';\n\n\nfunction CardList({ cardData, deleteItem }) {\n    return ( \n        <div className=\"card-list-swimlane\">\n            {cardData.map( (props) => \n                <Card key={props.id} deleteItem={deleteItem} {...props} /> )}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\nimport './CardsForm.css';\n\nfunction CardsForm(props) {\n    const [frontSide, setFrontSide] = React.useState('');\n    const [backSide, setBackSide] = React.useState('');\n    function handleFrontSideChange(e) {\n        setFrontSide(e.target.value);\n    }\n    function handleBackSideChange(e) {\n        setBackSide(e.target.value);\n    }\n    function handleSubmit(e) {\n        e.preventDefault(); \n        props.addItem(frontSide, backSide);\n    }\n    return (\n        <form action=\"#\" onSubmit={handleSubmit} className=\"form-container\">\n            <label className=\"textfield-container\">\n                Front side:\n                <input type=\"text\"  \n                       onChange={handleFrontSideChange}\n                       value={frontSide}\n                       required\n                       placeholder=\"Front side\" \n                       className=\"js-front-side textfield-input\" />\n            </label>\n            <label className=\"textfield-container\">\n                Back side:\n                <input type=\"text\" \n                       onChange={handleBackSideChange}\n                       value={backSide}\n                       required\n                       placeholder=\"Back side\" \n                       className=\"js-back-side textfield-input\" />\n            </label>\n            \n            <input type=\"submit\" value=\"Submit Card\" className=\"submit-button\" />\n        </form>\n\n    );\n}\n\nexport default CardsForm;","import React, { Component, useState, useEffect } from 'react';\nimport './App.css';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport CardList from './components/CardList/CardList';\nimport CardsForm from './components/CardsForm/CardsForm';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nclass App_ClassBased extends Component {\n  state = {\n    cards: []\n  }\n  componentDidMount() {\n    // called when the component first mounts to the DOM \n    // - data loading, e.g. from APIs (Application Programming Interfaces)\n    // Do not load data inside the constructor! Load data in the componentDidMount\n    fetch( this.props.apiUrl )\n      .then( data => data.json() )\n      .then( countries => {\n          function getNameAndCapital( country ) {\n            return { \n              frontSide: country.name, \n              backSide: country.capital,\n              id: uuidv4() \n            }\n          }\n          const cards = countries.map( getNameAndCapital );\n          this.setState({ cards });\n      } );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AppHeader title=\"Flash Cards\" />\n        <CardsForm />        \n        <CardList cardData={this.state.cards} />\n      </div>\n    );\n  }\n}\n\nfunction App_Functional( props ) {\n  const [cards, setCards] = useState([]);\n\n  // functionCallback is called \n  // 1. componentDidMount()\n  // 2. componentDidUpdate() or componentWillUnmount()\n  useEffect( () => {\n    if ( cards.length === 0 ) {\n      fetch( props.apiUrl )\n      .then( data => data.json() )\n      .then( countries => {\n          function getNameAndCapital( country ) {\n            return { \n              frontSide: country.name, \n              backSide: country.capital,\n              id: uuidv4()  \n            }\n          }\n          const cards = countries.map( getNameAndCapital );\n          setCards(cards);\n      } );\n    } \n  } );\n  function addItem(frontSide, backSide) { \n    if ( typeof cards.find( card => card.frontSide == frontSide ) !== 'undefined' ) {\n      alert('The front side has to be unique. Card was not added');\n    } else {\n      const newItem = { \n        frontSide, \n        backSide, \n        id: uuidv4() \n      }\n      setCards( previousCards => \n        [newItem, ...previousCards] \n      );\n    }\n  }\n  function deleteItem(id) {\n    setCards( previousCards => \n      previousCards.filter( card => card.id !== id )\n    );\n  }\n  return (\n    <div className=\"App\">\n      <AppHeader title=\"Flash Cards\" />\n      <CardsForm addItem={addItem} />\n      <CardList cardData={cards} deleteItem={deleteItem} />\n    </div>\n  );  \n}\n\nexport default App_Functional;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App apiUrl=\"https://restcountries.eu/rest/v2/all\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}